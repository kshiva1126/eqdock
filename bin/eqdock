#!/usr/bin/env bash
set -e
CR=`echo $'\n> '`

echo "Hello eqdock!"

# SELECT EC-CUBE VERSION
setEccubeVersion()
{
  local -a ARRAY=("4.0.0" "4.0.1" "4.0.2" "4.0.3")
  echo -e "インストールしたいEC-CUBEのバージョンを選択してください" 1>&2
  select VAR in "${ARRAY[@]}"
  do
    if [ "$REPLY" -ge 1 ] && [ "$REPLY" -le 4 ]; then
      break
    fi
    echo "1~4で入力してください" 1>&2
  done

  echo "$VAR"
}

setDBKind()
{
  read -ep "使用したいDBを選択してください mysql/postgres [ mysql ] ${CR}" DB_KIND
  while [ "_${DB_KIND}" != "_mysql" ] && [ "_${DB_KIND}" != "_postgres" ]
  do
    if [ -z "$DB_KIND" ]; then
      DB_KIND=mysql
    fi
    if [ "_${DB_KIND}" != "_mysql" ] && [ "_${DB_KIND}" != "_postgres" ]; then
      echo  1>&2
      read -ep "mysqlまたはpostgresで選択してください ${CR}" DB_KIND
    fi
  done

  echo "$DB_KIND"
}

setDBVersion()
{
  local DB_KIND="$1"
  case "$DB_KIND" in
    "mysql" )
      local ARRAY=("5.5" "5.6" "5.7")
      ;;
    "postgres" )
      local ARRAY=("9.2" "9.3" "9.4" "9.5" "9.6" "10")
      ;;
  esac

  local ARRAY_LEN="${#ARRAY[@]}"
  echo -e "インストールしたい${DB_KIND}のバージョンを選択してください" 1>&2
  select VAR in "${ARRAY[@]}"
  do
    if [ "$REPLY" -ge 1 ] && [ "$REPLY" -le $ARRAY_LEN ]; then
      break
    fi
    echo "1~${ARRAY_LEN}で入力してください" 1>&2
  done

  echo "$VAR"
}

setDBName()
{
  local REGEX='^[-0-9a-zA-Z_]+$'
  read -ep "登録したいDB名を入力してください また文字を消去したい場合はctrl + uを使用してください${CR}" DB_NAME
  while :
  do
    DB_NAME=$(echo "${DB_NAME}" | xargs)
    HAS_SPACE=$(echo "${DB_NAME}" | grep " ")

    if [ -z "$DB_NAME" ]; then
      read -ep "DB名を入力してください ${CR}" DB_NAME
    elif [ -n "$HAS_SPACE" ]; then
      read -ep "DB名に空白は含められません ${CR}" DB_NAME
    elif [[ "$DB_NAME" =~ $REGEX ]]; then
      break
    else
      read -ep "DB名には半角英数字・ハイフン・アンダースコアのみを使用してください${CR}" DB_NAME
    fi
  done

  echo "$DB_NAME"
}

setDBUser()
{
  local REGEX='^[-0-9a-zA-Z_]+$'
  read -ep "登録したいDBユーザを入力してください また文字を消去したい場合はctrl + uを使用してください${CR}" DB_USER
  while :
  do
    DB_USER=$(echo "${DB_USER}" | xargs)
    HAS_SPACE=$(echo "${DB_USER}" | grep " ")

    if [ -z "$DB_USER" ]; then
      read -ep "DBユーザを入力してください ${CR}" DB_USER
    elif [ -n "$HAS_SPACE" ]; then
      read -ep "DBユーザに空白は含められません ${CR}" DB_USER
    elif [[ "$DB_USER" =~ $REGEX ]]; then
      break
    else
      read -ep "DBユーザには半角英数字・ハイフン・アンダースコアのみを使用してください${CR}" DB_USER
    fi
  done

  echo "$DB_USER"
}

setDBPasswd()
{
  local REGEX='^[!-/]|[0-9a-zA-Z]|[;-@]|[\[-_]|[{-~]+$'
  read -ep "登録したいDBパスワードを入力してください また文字を消去したい場合はctrl + uを使用してください${CR}" DB_PASSWD
  while :
  do
    DB_PASSWD=$(echo "${DB_PASSWD}" | xargs)
    HAS_SPACE=$(echo "${DB_PASSWD}" | grep " ")

    if [ -z "$DB_PASSWD" ]; then
      read -ep "DBパスワードを入力してください ${CR}" DB_PASSWD
    elif [ -n "$HAS_SPACE" ]; then
      read -ep "DBパスワードに空白は含められません ${CR}" DB_PASSWD
    elif [[ "$DB_PASSWD" =~ $REGEX ]]; then
      break
    else
      read -ep "使用できない文字が含まれています もう一度入力してください${CR}" DB_PASSWD
    fi
  done

  echo "$DB_PASSWD"
}

setDBRootPasswd()
{
  local REGEX='^[!-/]|[0-9a-zA-Z]|[;-@]|[\[-_]|[{-~]+$'
  read -ep "登録したいDBrootパスワードを入力してください また文字を消去したい場合はctrl + uを使用してください${CR}" DB_ROOT_PASSWD
  while :
  do
    DB_ROOT_PASSWD=$(echo "${DB_ROOT_PASSWD}" | xargs)
    HAS_SPACE=$(echo "${DB_ROOT_PASSWD}" | grep " ")

    if [ -z "$DB_ROOT_PASSWD" ]; then
      read -ep "DBrootパスワードを入力してください ${CR}" DB_ROOT_PASSWD
    elif [ -n "$HAS_SPACE" ]; then
      read -ep "DBrootパスワードに空白は含められません ${CR}" DB_ROOT_PASSWD
    elif [[ "$DB_ROOT_PASSWD" =~ $REGEX ]]; then
      break
    else
      read -ep "使用できない文字が含まれています もう一度入力してください${CR}" DB_ROOT_PASSWD
    fi
  done

  echo "$DB_ROOT_PASSWD"
}

setPHPVersion()
{
  local ECCUBE_VERSION="$1"
  case "$ECCUBE_VERSION" in
    "4.0.0" | "4.0.1" )
      local ARRAY=("7.1" "7.2")
      ;;
    * )
      local ARRAY=("7.1" "7.2" "7.3")
      ;;
  esac

  local ARRAY_LEN="${#ARRAY[@]}"
  echo -e "インストールしたいPHPのバージョンを選択してください" 1>&2
  select VAR in "${ARRAY[@]}"
  do
    if [ "$REPLY" -ge 1 ] && [ "$REPLY" -le $ARRAY_LEN ]; then
      break
    fi
    echo "1~${ARRAY_LEN}で入力してください" 1>&2
  done

  echo "$VAR"
}

cloneECCUBE()
{
  local ECCUBE_VERSION="$1"
  # カレントディレクトリにeccubeディレクトリが存在しない場合
  if [ ! -d ./eccube ]; then
    mkdir eccube
  fi

  git clone https://github.com/EC-CUBE/ec-cube.git -b "$ECCUBE_VERSION" ./eccube
  rm -rf ./eccube/.git ./eccube/.github ./eccube/docker
}

copyDockerMaterial()
{
  local DB_KIND="$1"
  local FILE_DIR="$0"
  EQDOCK_ROOT_DIR="${FILE_DIR%/*}/../"

  if [ ! -d ./Docker ]; then
    mkdir -p ./Docker/app ./Docker/db
  fi

  cp -r "${EQDOCK_ROOT_DIR}Docker/app" ./Docker
  cp "${EQDOCK_ROOT_DIR}Docker/db/${DB_KIND}/Dockerfile" ./Docker/db
}

rewriteDockerfile()
{
  local DB_KIND="$1"
  local DB_VERSION="$2"
  local PHP_VERSION="$3"

  # DB
  local DB_FROM="FROM ${DB_KIND}:${DB_VERSION}"
  sed -i -e "/^FROM/d" "./Docker/db/Dockerfile"
  sed -i "1i ${DB_FROM}" "./Docker/db/Dockerfile"

  # PHP
  local PHP_FROM="FROM php:${PHP_VERSION}-apache-stretch"
  sed -i -e "/^FROM/d" "./Docker/app/Dockerfile"
  sed -i "1i ${PHP_FROM}" "./Docker/app/Dockerfile"
}

rewriteDockerCompose()
{
  local DB_KIND="$1"
  local DB_NAME="$2"
  local DB_USER="$3"
  local DB_PASSWD="$4"
  local DB_ROOT_PASSWD="$5"

  local CUR_DIR=$(echo ${PWD##*/})

  # DEFAULT
  cat << DOCKER_COMPOSE > ./docker-compose.yml
version: "3"

volumes:
  ${CUR_DIR}-app-data:
    driver: local
  ${CUR_DIR}-db-data:
    driver: local

services:
  sftp:
    image: atmoz/sftp
    privileged: true
    container_name: ${CUR_DIR}_sftp
    ports:
      - "2222:22"
    command: 'sftp:pass:33:33:upload'
    volumes:
      - ${CUR_DIR}-app-data:/home/sftp/upload
    depends_on:
      - db

DOCKER_COMPOSE


  # DB
  cat << DOCKER_COMPOSE >> ./docker-compose.yml
  db:
    build:
      context: ./Docker/db
      dockerfile: Dockerfile
    container_name: ${CUR_DIR}_db
DOCKER_COMPOSE
  case "$DB_KIND" in
    "mysql" )
  cat << DOCKER_COMPOSE >> ./docker-compose.yml
    environment:
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWD}
    volumes:
      - ${CUR_DIR}-db-data:/var/lib/mysql
    ports:
      - 3306:3306

DOCKER_COMPOSE
      ;;
    "postgres" )
  cat << DOCKER_COMPOSE >> ./docker-compose.yml
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWD}
    volumes:
      - ${CUR_DIR}-db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432

DOCKER_COMPOSE
      ;;
  esac

  # PHP
  cat << DOCKER_COMPOSE >> ./docker-compose.yml
  app:
    build:
      context: ./Docker/app
      dockerfile: Dockerfile
    container_name: ${CUR_DIR}_app
    volumes:
      - ${CUR_DIR}-app-data:/var/www/html
    ports:
      - 8080:80
    stdin_open: true
    tty: true
    depends_on:
      - sftp

DOCKER_COMPOSE
}


ECCUBE_VERSION=`setEccubeVersion`
echo "$ECCUBE_VERSION"

# cloneECCUBE "$ECCUBE_VERSION"

DB_KIND=`setDBKind`
echo "$DB_KIND"

DB_VERSION=`setDBVersion "${DB_KIND}"`
echo "$DB_VERSION"

DB_NAME=`setDBName`
echo "$DB_NAME"

DB_USER=`setDBUser`
echo "$DB_USER"

DB_PASSWD=`setDBPasswd`
echo "$DB_PASSWD"

if [ "_${DB_KIND}" = "_mysql" ]; then
  DB_ROOT_PASSWD=`setDBRootPasswd`
  echo "$DB_ROOT_PASSWD"
fi

PHP_VERSION=`setPHPVersion "${ECCUBE_VERSION}"`
echo "$PHP_VERSION"

copyDockerMaterial "$DB_KIND"

rewriteDockerfile "$DB_KIND" "$DB_VERSION" "$PHP_VERSION"

rewriteDockerCompose "$DB_KIND" "$DB_NAME" "$DB_USER" "$DB_PASSWD" "$DB_ROOT_PASSWD"
