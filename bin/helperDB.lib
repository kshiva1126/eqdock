CR=`echo $'\n> '`

setDBKind()
{
  read -ep "使用したいDBを選択してください mysql/postgres [ mysql ] ${CR}" DB_KIND
  while [ "_${DB_KIND}" != "_mysql" ] && [ "_${DB_KIND}" != "_postgres" ]
  do
    if [ -z "$DB_KIND" ]; then
      DB_KIND=mysql
    fi
    if [ "_${DB_KIND}" != "_mysql" ] && [ "_${DB_KIND}" != "_postgres" ]; then
      echo  1>&2
      read -ep "mysqlまたはpostgresで選択してください ${CR}" DB_KIND
    fi
  done

  echo "$DB_KIND"
}

setDBVersion()
{
  local DB_KIND="$1"
  case "$DB_KIND" in
    "mysql" )
      local ARRAY=("5.5" "5.6" "5.7")
      ;;
    "postgres" )
      local ARRAY=("9.2" "9.3" "9.4" "9.5" "9.6" "10")
      ;;
  esac

  local ARRAY_LEN="${#ARRAY[@]}"
  echo -e "インストールしたい${DB_KIND}のバージョンを選択してください" 1>&2
  select VAR in "${ARRAY[@]}"
  do
    if [ "$REPLY" -ge 1 ] && [ "$REPLY" -le $ARRAY_LEN ]; then
      break
    fi
    echo "1~${ARRAY_LEN}で入力してください" 1>&2
  done

  echo "$VAR"
}

setDBName()
{
  local REGEX='^[-0-9a-zA-Z_]+$'
  read -ep "登録したいDB名を入力してください${CR}" DB_NAME
  while :
  do
    DB_NAME=$(echo "${DB_NAME}" | xargs)
    HAS_SPACE=$(echo "${DB_NAME}" | grep " ")

    if [ -z "$DB_NAME" ]; then
      read -ep "DB名を入力してください ${CR}" DB_NAME
    elif [ -n "$HAS_SPACE" ]; then
      read -ep "DB名に空白は含められません ${CR}" DB_NAME
    elif [[ "$DB_NAME" =~ $REGEX ]]; then
      break
    else
      read -ep "DB名には半角英数字・ハイフン・アンダースコアのみを使用してください${CR}" DB_NAME
    fi
  done

  echo "$DB_NAME"
}

setDBUser()
{
  local REGEX='^[-0-9a-zA-Z_]+$'
  read -ep "登録したいDBユーザを入力してください${CR}" DB_USER
  while :
  do
    DB_USER=$(echo "${DB_USER}" | xargs)
    HAS_SPACE=$(echo "${DB_USER}" | grep " ")

    if [ -z "$DB_USER" ]; then
      read -ep "DBユーザを入力してください ${CR}" DB_USER
    elif [ -n "$HAS_SPACE" ]; then
      read -ep "DBユーザに空白は含められません ${CR}" DB_USER
    elif [[ "$DB_USER" =~ $REGEX ]]; then
      break
    else
      read -ep "DBユーザには半角英数字・ハイフン・アンダースコアのみを使用してください${CR}" DB_USER
    fi
  done

  echo "$DB_USER"
}

setDBPasswd()
{
  local REGEX='^[!-/]|[0-9a-zA-Z]|[;-@]|[\[-_]|[{-~]+$'
  read -ep "登録したいDBパスワードを入力してください${CR}" DB_PASSWD
  while :
  do
    DB_PASSWD=$(echo "${DB_PASSWD}" | xargs)
    HAS_SPACE=$(echo "${DB_PASSWD}" | grep " ")

    if [ -z "$DB_PASSWD" ]; then
      read -ep "DBパスワードを入力してください ${CR}" DB_PASSWD
    elif [ -n "$HAS_SPACE" ]; then
      read -ep "DBパスワードに空白は含められません ${CR}" DB_PASSWD
    elif [[ "$DB_PASSWD" =~ $REGEX ]]; then
      break
    else
      read -ep "使用できない文字が含まれています もう一度入力してください${CR}" DB_PASSWD
    fi
  done

  echo "$DB_PASSWD"
}

setDBRootPasswd()
{
  local REGEX='^[!-/]|[0-9a-zA-Z]|[;-@]|[\[-_]|[{-~]+$'
  read -ep "登録したいDBrootパスワードを入力してください${CR}" DB_ROOT_PASSWD
  while :
  do
    DB_ROOT_PASSWD=$(echo "${DB_ROOT_PASSWD}" | xargs)
    HAS_SPACE=$(echo "${DB_ROOT_PASSWD}" | grep " ")

    if [ -z "$DB_ROOT_PASSWD" ]; then
      read -ep "DBrootパスワードを入力してください ${CR}" DB_ROOT_PASSWD
    elif [ -n "$HAS_SPACE" ]; then
      read -ep "DBrootパスワードに空白は含められません ${CR}" DB_ROOT_PASSWD
    elif [[ "$DB_ROOT_PASSWD" =~ $REGEX ]]; then
      break
    else
      read -ep "使用できない文字が含まれています もう一度入力してください${CR}" DB_ROOT_PASSWD
    fi
  done

  echo "$DB_ROOT_PASSWD"
}

checkInitial()
{
  DB_KIND="$1"
  read -ep "DBに初期データを投入しますか? y/n${CR}" IS_INITIAL
  while :
  do
    case "$IS_INITIAL" in
      "y" | "yes" | "Y" | "yes" )
        setInitialData "$DB_KIND"
        ;;
      "n" | "no" | "N" | "no" )
        break
        ;;
      * )
        read -ep "y/nで入力してください${CR}"
        ;;
    esac
  done
}

setInitialData()
{
  DB_KIND="$1"
  while :
  do
    read -ep "初期データまでの絶対パスを入力してください${CR}" PATH
    if [ -z "$PATH" ]; then
      read -ep "パスが指定されていません 初期データの投入を終了しますか? y/n${CR}" IS_OK
      case "$IS_OK" in
      "y" | "yes" | "Y" | "yes" )
        braek
        ;;
      "n" | "no" | "N" | "no" )
        continue
        ;;
      * )
        read -ep "y/nで入力してください${CR}"
        ;;
      esac
    fi

    if [ -a "$PATH" ]; then
      if [[ "$PATH" =~ \.sql$|\.sql\.gz|\.sh ]]; then
        cp "$PATH" ./Docker/db/init.d
        read -ep "続けて投入しますか？ y/n${CR}" IS_OK
        case "$IS_OK" in
          "y" | "yes" | "Y" | "yes" )
            continue
            ;;
          "n" | "no" | "N" | "no" )
            break
            ;;
          * )
            read -ep "y/nで入力してください${CR}"
            ;;
        esac
      else
        echo -e "拡張子がsql/sql.gz/shのファイルを選択してください"
        continue
      fi
    else
      read -ep "ファイルが存在しません 初期データの投入を終了しますか? y/n${CR}" IS_OK
      case "$IS_OK" in
      "y" | "yes" | "Y" | "yes" )
        braek
        ;;
      "n" | "no" | "N" | "no" )
        continue
        ;;
      * )
        read -ep "y/nで入力してください${CR}"
        ;;
      esac
    fi

  done
}